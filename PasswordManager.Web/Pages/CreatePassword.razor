@page "/create-password"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Helpers.RequestHelper RequestHelper

@using PasswordManager.Core.Password
@using System.Security.Cryptography
@using System.Text

<PageTitle>Create Password</PageTitle>

<EditForm Model="@newPassword" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="newPassword.Name" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <div class="input-group">
            <InputText id="password" type="text" class="form-control" @bind-Value="newPassword.Encrypted" />
            <button type="button" class="btn btn-secondary" @onclick="GeneratePassword">🔄 Generate</button>
        </div>
    </div>

    <div class="form-group">
        <h5>Password generation options :</h5>

        <label for="length">Password Length: @generationOptions.Length</label>
        <input type="range" id="length" min="14" max="64" step="1" class="form-range" @bind="generationOptions.Length" />

        <div class="form-check">
            <InputCheckbox id="includeLowercase" @bind-Value="generationOptions.UseLowercaseCharacters" class="form-check-input" />
            <label class="form-check-label" for="includeLowercase">Include Lowercase Letters (a-z)</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="includeUppercase" @bind-Value="generationOptions.UseUppercaseCharacters" class="form-check-input" />
            <label class="form-check-label" for="includeUppercase">Include Uppercase Letters (A-Z)</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="includeNumbers" @bind-Value="generationOptions.UseNumbers" class="form-check-input" />
            <label class="form-check-label" for="includeNumbers">Include Numbers (0-9)</label>
        </div>
        <div class="form-check">
            <InputCheckbox id="includeSpecialChars" @bind-Value="generationOptions.UseSpecialCharacters" class="form-check-input" />
            <label class="form-check-label" for="includeSpecialChars">Include Special Characters (@PasswordHelper.specialCharacters)</label>
        </div>
    </div>

    <div class="form-group">
        <label for="category">Category</label>
        <InputText id="category" class="form-control" @bind-Value="newPassword.Category" />
    </div>

    <button type="submit" class="btn btn-primary">Create</button>
</EditForm>

@if (validationErrors.Any())
{
    <div class="alert alert-danger mt-3">
        <ul>
            @foreach (var error in validationErrors)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

@if (generationError != null)
{
    <div class="alert alert-danger mt-3">
        <ul>
            <li>@generationError</li>
        </ul>
    </div>
}

@code {
    private CreatePasswordModel newPassword = new CreatePasswordModel();
    private List<string> validationErrors = [];

    private PasswordHelper.PasswordGenerationOptions generationOptions = new()
    {
        Length = 64,
        UseLowercaseCharacters = true,
        UseUppercaseCharacters = true,
        UseNumbers = true,
        UseSpecialCharacters = true,
    };
    private string? generationError = null;

    private async Task HandleValidSubmit()
    {
        validationErrors = PasswordHelper.GetPasswordValidationErrors(newPassword);
        if (validationErrors.Count > 0)
            return;

        try
        {
            var response = await RequestHelper.PostAsync("/api/passwords", newPassword);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/");
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
            {
                validationErrors = await response.Content.ReadFromJsonAsync<List<string>>();
            }
            else
            {
                validationErrors.Add("An error occurred when creating password");
            }
        }
        catch (UnauthorizedAccessException)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private void GeneratePassword()
    {
        try
        {
            newPassword.Encrypted = PasswordHelper.GeneratePassword(generationOptions);
        }
        catch (ArgumentException exception)
        {
            generationError = exception.Message;
        }
    }
}