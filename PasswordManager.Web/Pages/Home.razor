@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Helpers.RequestHelper RequestHelper

@using PasswordManager.Core.Password

<PageTitle>Home</PageTitle>

@if (passwords == null)
{
    <p>Loading...</p>
}
else if (passwords.Count == 0)
{
    <p>No passwords available.</p>

    <button class="btn btn-primary" @onclick="CreatePassword">Create Password</button>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Encrypted</th>
                <th>Category</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var password in passwords)
            {
                <tr>
                    <td>@password.Name</td>
                    <td>@password.Encrypted</td>
                    <td>@password.Category</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => UpdatePassword(password.Id)">Update</button>
                        <button class="btn btn-danger" @onclick="() => DeletePassword(password.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="CreatePassword">Create Password</button>
}

@code {
    private List<GetPasswordModel>? passwords = null;

    protected async override void OnInitialized()
    {
        try
        {
            var response = await RequestHelper.GetAsync("/api/passwords");

            if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Navigation.NavigateTo("/login");
                return;
            }

            else if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                passwords = await response.Content.ReadFromJsonAsync<List<GetPasswordModel>>();
                StateHasChanged();
                return;
            }
        }
        catch (UnauthorizedAccessException)
        {
            Navigation.NavigateTo("/login");
            return;
        }
    }

    private void CreatePassword()
    {
        Navigation.NavigateTo("/create-password");
    }

    private void UpdatePassword(int id)
    {
        Navigation.NavigateTo($"/update-password/{id}");
    }

    private async Task DeletePassword(int id)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this password?");
        if (confirm)
        {
            try
            {
                var response = await RequestHelper.DeleteAsync($"/api/passwords/{id}");

                if (response.IsSuccessStatusCode)
                {
                    passwords.RemoveAll(p => p.Id == id);
                }
                else
                {
                    await JSRuntime.InvokeAsync<bool>("alert", "An error has occured");
                }
            }
            catch (UnauthorizedAccessException)
            {
                Navigation.NavigateTo("/login");
                return;
            }
        }
    }
}